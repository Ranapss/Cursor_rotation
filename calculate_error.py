# -*- coding: utf-8 -*-
"""Calculate error.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ofheo8nIec-D4Wo4zzjQLn4PCnhcR_is
"""

''' Mount My google dirve, only needed if storing the participant data in google drive'''
from google.colab import drive
drive.mount('/content/drive')

import numpy as np 
import matplotlib as plt 
import pandas as pd 
import math 
from array import array
from google.colab import files
#uploaded = files.upload()

''' Only needed if mounting the google drive'''
cd drive/My Drive/data
!ls

def missing_numbers(num_list):
      original_list = [x for x in range(num_list[0], num_list[-1] + 1)]
      num_list = set(num_list)
      return (list(num_list ^ set(original_list)))
    
def getAngle(c):
    """Counterclockwise angle in degrees around point (0,0) and starting at (0,0.5)
        Returns a float between 0.0 and 360.0"""
    ang = math.degrees(
        math.atan2(c[1], -c[0]) - math.atan2(0.5, 0))
    return ang + 360 if ang < 0 else ang


def get_error(xpos,ypos,joyy,news,end):
    error_array = []
    time = []
    for p in range(len(joyy)):
        error_array.append(getAngle((xpos[p],ypos[p]))-getAngle((news[p][rad_idx[p]], joyy[p][rad_idx[p]])))

        if abs(error_array[p]) > 180.0:
            if error_array[p] > 0:
                error_array[p] = 360 - error_array[p]
            else:
                error_array[p] = 360 + error_array[p]

        time.append(p)
    return error_array,time

def get_error_vd():
    
    error = []
    for x in range(len(polarx)):
        most = 0
        for y in range(len(polarx[x])-1):
            if radius[x][y] < radius[x][y+1]:
                p1 = np.array([0,0])
                p2 = np.array([df.xpos[x],df.ypos[x]])
                p3 = np.array([polarx[x][y],polary[x][y]])
                d=np.cross(p2-p1,p3-p1)/np.linalg.norm(p2-p1)
                #d = abs(d)
                if abs(d) > abs(most):
                    most = d 
        error.append(most)
    return error

''' reading the different results csv'''
re = pd.read_csv('mk_force_2_2019_Aug_03_1351.csv')
vd = pd.read_csv('mk_force_2_2019_Aug_03_1351.csv')

df = re

joyy = []
joyx =[]
rawx = []
rawy = []
polarx = []
polary = []
radius = []
ang = []
xpos = []
ypos = []
smoothx = []
smoothy = []
for x in range(len(df)):
    joyy.append(eval(df.joyy[x]))
    joyx.append(eval(df.joyx[x]))
    polarx.append(eval(df.polarx[x]))
    polary.append(eval(df.polary[x]))
    radius.append(eval(df.radius[x]))
    ang.append(eval(df.angle[x]))
    xpos.append(df.xpos[x])
    ypos.append(df.ypos[x])
    smoothx.append(eval(df.smoothx[x]))
    smoothy.append(eval(df.smoothy[x]))

'''Only use for VD error'''
polarx = smoothx
polary = smoothy

'''Use for Rotation error to get the radius indicies'''
error = []
time = []
rad_idx = []
ang = []
for x in range(len(radius)):
    for y in range(len(radius[x])):
        if .15< radius[x][y] < .25:
            rad_idx.append(y)
            time.append(x)
            break
print(len(rad_idx))
print(missing_numbers(time))

print(len(rad_idx))

'''used to plot the data for a single trial, if there is a missing radius index this can help'''
h = 233  # changes the trial your are visualizing 
start = 0 # start index within the trial 
end = 18 # ending index within the trial 
 
plt.rcParams['figure.figsize'] = [10, 10]
plt.pyplot.scatter(polarx[h],polary[h])
plt.pyplot.scatter(polarx[h][start:end],polary[h][start:end])
plt.pyplot.scatter(df.xpos,df.ypos)
plt.pyplot.scatter(df.xpos[h],df.ypos[h])

x = np.linspace(-1,1,20)
y = (df.ypos[h]/df.xpos[h])*x
#print(df.ypos[h]/df.xpos[h])
if abs(ypos[h]) == 0.91:
    y = np.linspace(-1,1,20)
    x = 0*y

plt.pyplot.scatter(x,y)
p1 = np.array([0,0])
p2 = np.array([df.xpos[h],df.ypos[h]])
p3 = np.array([polarx[h][end],polary[h][end]])
d=np.cross(p2-p1,p3-p1)/np.linalg.norm(p2-p1)
d = abs(d)
print('distance:',d)
print('traget angle is :', getAngle((xpos[h],ypos[h])))
print('x :', df.xpos[h])
print('y :', df.ypos[h])
#print('radius at:', end, 'is:', radius[h][end])
#print('angle for this point from csv:', ang[h][end])
print('initial angle is :', getAngle((polarx[h][end], polary[h][end])))

error = abs(getAngle((xpos[h],ypos[h]))-getAngle((polarx[h][end], polary[h][end])))
if error > 180.0:
    error = 360 - error
    
print('The error is : ', error, 'degrees')

"""VD Error Code"""

plt.rcParams['figure.figsize'] = [10, 10]
e = get_error_vd()
plt.pyplot.plot(e)

avg1 = np.array(e)
avgd = np.mean(avg1.reshape(-1, 8), axis=1)
plt.pyplot.plot(avgd)

"""Rotation Error Code"""

plt.rcParams['figure.figsize'] = [10, 10]
e,t = get_error(xpos,ypos,polary,polarx,7)
plt.pyplot.plot(e)

avg1 = np.array(e)
avgd = np.mean(avg1.reshape(-1, 8), axis=1)
plt.pyplot.plot(avgd)